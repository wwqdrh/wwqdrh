lua_package_path '/etc/nginx/lib/?.lua;;';

lua_shared_dict grayapp 1m;

init_by_lua_block {
    local grayapp = ngx.shared.grayapp
    grayapp:set("curapp", '')
    grayapp:set("curappport", 9000)
    grayapp:set("curappweight", 0)
    grayapp:set("newapp", '')
    grayapp:set("newappport", 9000)
    grayapp:set("newappweight", 0)
}

upstream gray_upstream {
    server 0.0.0.1; # 占位用

    balancer_by_lua_block {
        local balancer = require "ngx.balancer";
        local grayapp = ngx.shared.grayapp;

        math.randomseed (os.time());
        local balace = 100 * grayapp:get("curappweight") / (grayapp:get("curappweight") + grayapp:get("newappweight"));
        local randnum = math.random(100);
        ngx.log(ngx.ERR, "balace: ", balace, "; rand: ", randnum);

        if randnum > balace then
            ngx.log(ngx.ERR, "donewapp: app: ", grayapp:get("newapp"), "; port: ", grayapp:get("newappport"));

            local ok, err = balancer.set_current_peer(grayapp:get("newapp"), grayapp:get("newappport"))
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        else
            ngx.log(ngx.ERR, "docurapp: app: ", grayapp:get("curapp"), "; port: ", grayapp:get("curappport"));

            local ok, err = balancer.set_current_peer(grayapp:get("curapp"), grayapp:get("curappport"))
            if not ok then
                ngx.log(ngx.ERR, "failed to set the current peer: ", err)
                return ngx.exit(500)
            end
        end

        ok, err = balancer.set_more_tries(1)
        if not ok then
        	ngx.log(ngx.ERR, "set_more_tries failed: ", err)
        end

        ok, err = balancer.set_timeouts(1)
        if not ok then
        	ngx.log(ngx.ERR, "set_more_tries failed: ", err)
        end
    }

    keepalive 10;  # connection pool
}

server {
    listen 9000;

    location /curapp {
        content_by_lua_block {
            local resolver = require("resolver")
            local grayapp = ngx.shared.grayapp
            local arg = ngx.req.get_uri_args()
            for k,v in pairs(arg) do
                if k == 'name' then
                    local nameip, name  = resolver._get_addr(v)
                    grayapp:set("curapp", nameip)
                    ngx.log(ngx.DEBUG, "curapp: ", grayapp:get('curapp'))
                elseif k == 'port' then
                    grayapp:set("curappport", tonumber(v))
                    ngx.log(ngx.DEBUG, "curappport: ", grayapp:get('curappport'))
                elseif k == 'weight' then
                    grayapp:set("curappweight", tonumber(v))
                    ngx.log(ngx.DEBUG, "curappweight: ", grayapp:get("curappweight"))
                end
            end
        }
    }

    location /newapp {
        content_by_lua_block {
            local resolver = require("resolver")
            local grayapp = ngx.shared.grayapp
            local arg = ngx.req.get_uri_args()
            for k,v in pairs(arg) do
                if k == 'name' then
                    local nameip, name  = resolver._get_addr(v)
                    grayapp:set("newapp", nameip)
                elseif k == 'port' then
                    grayapp:set("newappport", tonumber(v))
                elseif k == 'weight' then
                    grayapp:set("newappweight", tonumber(v))
                end
            end
        }
    }

    location / {
        proxy_set_header Host gray_upstream;
        proxy_http_version 1.1;
        proxy_pass http://gray_upstream;
    }
}